From 74c1b3ee5fb7546f8f07b4397c99f644f15b2235 Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Sun, 10 Jul 2022 00:50:05 -0700
Subject: [PATCH] Fix file closing on windows

---
 .gitignore                                    |  2 +
 CMakeLists.txt                                | 48 ++++++++++
 src/CMakeLists.txt                            | 17 ++++
 src/bin/CMakeLists.txt                        | 85 +++++++++++++++++
 src/bin/fstarcsort-main.cc                    |  2 +-
 src/bin/fstclosure-main.cc                    |  2 +-
 src/bin/fstcompile-main.cc                    | 20 ++--
 src/bin/fstcompose-main.cc                    |  4 +-
 src/bin/fstconvert-main.cc                    |  2 +-
 src/bin/fstdeterminize-main.cc                | 12 +--
 src/bin/fstdifference-main.cc                 |  4 +-
 src/bin/fstdisambiguate-main.cc               |  8 +-
 src/bin/fstdraw-main.cc                       | 34 +++----
 src/bin/fstencode-main.cc                     |  8 +-
 src/bin/fstepsnormalize-main.cc               |  2 +-
 src/bin/fstequal-main.cc                      |  2 +-
 src/bin/fstequivalent-main.cc                 | 12 +--
 src/bin/fstinfo-main.cc                       |  8 +-
 src/bin/fstintersect-main.cc                  |  4 +-
 src/bin/fstisomorphic-main.cc                 |  2 +-
 src/bin/fstmap-main.cc                        |  8 +-
 src/bin/fstminimize-main.cc                   |  4 +-
 src/bin/fstprint-main.cc                      | 20 ++--
 src/bin/fstproject-main.cc                    |  2 +-
 src/bin/fstprune-main.cc                      |  6 +-
 src/bin/fstpush-main.cc                       | 12 +--
 src/bin/fstrandgen-main.cc                    | 12 +--
 src/bin/fstrelabel-main.cc                    | 18 ++--
 src/bin/fstreplace-main.cc                    |  8 +-
 src/bin/fstreverse-main.cc                    |  2 +-
 src/bin/fstreweight-main.cc                   |  2 +-
 src/bin/fstrmepsilon-main.cc                  | 10 +-
 src/bin/fstshortestdistance-main.cc           |  8 +-
 src/bin/fstshortestpath-main.cc               | 12 +--
 src/bin/fstsymbols-main.cc                    | 20 ++--
 src/extensions/CMakeLists.txt                 | 43 +++++++++
 src/extensions/compact/CMakeLists.txt         | 92 +++++++++++++++++++
 src/extensions/compress/CMakeLists.txt        | 40 ++++++++
 src/extensions/const/CMakeLists.txt           | 38 ++++++++
 src/extensions/far/CMakeLists.txt             | 61 ++++++++++++
 src/extensions/linear/CMakeLists.txt          | 77 ++++++++++++++++
 src/extensions/lookahead/CMakeLists.txt       | 41 +++++++++
 src/extensions/mpdt/CMakeLists.txt            | 32 +++++++
 src/extensions/ngram/CMakeLists.txt           | 44 +++++++++
 src/extensions/ngram/bitmap-index.cc          |  7 +-
 src/extensions/ngram/nthbit.cc                |  2 +-
 src/extensions/pdt/CMakeLists.txt             | 36 ++++++++
 src/extensions/python/CMakeLists.txt          | 22 +++++
 src/extensions/special/CMakeLists.txt         | 59 ++++++++++++
 src/include/fst/compat.h                      | 22 +++++
 .../fst/extensions/far/compile-strings.h      |  3 -
 src/include/fst/extensions/far/create.h       |  1 -
 src/include/fst/extensions/far/far.h          | 10 ++
 .../fst/extensions/ngram/bitmap-index.h       |  2 +
 src/include/fst/extensions/ngram/nthbit.h     |  9 +-
 src/include/fst/flags.h                       | 22 +++--
 src/include/fst/properties.h                  |  3 +-
 src/include/fst/register.h                    |  2 +-
 src/include/fst/script/info-impl.h            |  1 +
 src/include/fst/symbol-table.h                | 11 +++
 src/include/fst/test/algo_test.h              |  2 +-
 src/lib/CMakeLists.txt                        | 41 +++++++++
 src/lib/mapped-file.cc                        |  5 +
 src/script/CMakeLists.txt                     | 76 +++++++++++++++
 src/test/CMakeLists.txt                       | 54 +++++++++++
 65 files changed, 1123 insertions(+), 157 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt
 create mode 100644 src/bin/CMakeLists.txt
 create mode 100644 src/extensions/CMakeLists.txt
 create mode 100644 src/extensions/compact/CMakeLists.txt
 create mode 100644 src/extensions/compress/CMakeLists.txt
 create mode 100644 src/extensions/const/CMakeLists.txt
 create mode 100644 src/extensions/far/CMakeLists.txt
 create mode 100644 src/extensions/linear/CMakeLists.txt
 create mode 100644 src/extensions/lookahead/CMakeLists.txt
 create mode 100644 src/extensions/mpdt/CMakeLists.txt
 create mode 100644 src/extensions/ngram/CMakeLists.txt
 create mode 100644 src/extensions/pdt/CMakeLists.txt
 create mode 100644 src/extensions/python/CMakeLists.txt
 create mode 100644 src/extensions/special/CMakeLists.txt
 create mode 100644 src/lib/CMakeLists.txt
 create mode 100644 src/script/CMakeLists.txt
 create mode 100644 src/test/CMakeLists.txt

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..687f872
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+.vscode/
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..aae4dc0
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,48 @@
+project(openfst)
+cmake_minimum_required(VERSION 3.18)
+include(CTest)
+find_package(ICU COMPONENTS data i18n io  test tu uc)
+if (ICU_FOUND)
+  include_directories(${ICU_INCLUDE_DIRS})
+  set(LIBS ${LIBS} ${ICU_LIBRARIES})
+endif (ICU_FOUND)
+
+include(GenerateExportHeader)
+set(CMAKE_MACOSX_RPATH 1)
+set(CMAKE_CXX_STANDARD 17)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (MSVC)
+    find_package(dlfcn-win32 REQUIRED)
+    set(CMAKE_DL_LIBS dlfcn-win32::dl)
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+    add_definitions(-DNOMINMAX)
+    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+    add_definitions(-D_USE_MATH_DEFINES)
+    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+
+    # some warnings related with fst
+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+endif (MSVC)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+
+set(SOVERSION "25")
+
+
+option(HAVE_BIN          "Build the fst binaries" ON)
+option(HAVE_SCRIPT       "Build the fstscript" ON)
+option(HAVE_COMPACT      "Build compact" ON)
+option(HAVE_COMPRESS "Build compress" ON)
+option(HAVE_CONST   "Build const" ON)
+option(HAVE_FAR  "Build far" ON)
+option(HAVE_GRM "Build grm" ON)
+option(HAVE_PDT "Build pdt" ON)
+option(HAVE_MPDT "Build mpdt" ON)
+option(HAVE_LINEAR "Build linear" ON)
+option(HAVE_LOOKAHEAD "Build lookahead" ON)
+option(HAVE_NGRAM "Build ngram" ON)
+option(HAVE_PYTHON "Build python" OFF)
+option(HAVE_SPECIAL "Build special" ON)
+
+add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..2729d99
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,17 @@
+#-DHAVE_CONFIG_H -I./../include -fno-exceptions -funsigned-char -std=c++11 -MT symbol-table.lo -MD -MP -MF .deps/symbol-table.Tpo -c symbol-table.cc  -fno-common -DPIC -o .libs/symbol-table.o
+
+include_directories(./include/)
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.h")
+
+add_subdirectory(lib)
+add_subdirectory(script)
+
+if(HAVE_BIN)
+  add_subdirectory(bin)
+endif(HAVE_BIN)
+
+add_subdirectory(extensions)
+
+enable_testing()
+add_subdirectory(test)
\ No newline at end of file
diff --git a/src/bin/CMakeLists.txt b/src/bin/CMakeLists.txt
new file mode 100644
index 0000000..e960377
--- /dev/null
+++ b/src/bin/CMakeLists.txt
@@ -0,0 +1,85 @@
+function (add_executable2 _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+include_directories(../include ../script/)
+
+add_executable2(fstarcsort fstarcsort-main.cc fstarcsort.cc)
+
+add_executable2(fstclosure fstclosure-main.cc fstclosure.cc)
+
+add_executable2(fstcompile  fstcompile-main.cc fstcompile.cc)
+
+add_executable2(fstcompose fstcompose-main.cc fstcompose.cc)
+
+add_executable2(fstconcat fstconcat-main.cc fstconcat.cc)
+
+add_executable2(fstconnect fstconnect-main.cc fstconnect.cc)
+
+add_executable2(fstconvert fstconvert-main.cc fstconvert.cc)
+
+add_executable2(fstdeterminize fstdeterminize-main.cc fstdeterminize.cc)
+
+add_executable2(fstdifference fstdifference-main.cc fstdifference.cc)
+
+add_executable2(fstdisambiguate fstdisambiguate-main.cc fstdisambiguate.cc)
+
+add_executable2(fstdraw fstdraw-main.cc fstdraw.cc)
+
+add_executable2(fstencode fstencode-main.cc fstencode.cc)
+
+add_executable2(fstepsnormalize fstepsnormalize-main.cc fstepsnormalize.cc)
+
+add_executable2(fstequal fstequal-main.cc fstequal.cc)
+
+add_executable2(fstequivalent fstequivalent-main.cc fstequivalent.cc)
+
+add_executable2(fstinfo fstinfo-main.cc fstinfo.cc)
+
+add_executable2(fstintersect fstintersect-main.cc fstintersect.cc)
+
+add_executable2(fstinvert fstinvert-main.cc fstinvert.cc)
+
+add_executable2(fstisomorphic fstisomorphic-main.cc fstisomorphic.cc)
+
+add_executable2(fstmap fstmap-main.cc fstmap.cc)
+
+add_executable2(fstminimize fstminimize-main.cc fstminimize.cc)
+
+add_executable2(fstprint fstprint-main.cc fstprint.cc)
+
+add_executable2(fstproject fstproject-main.cc fstproject.cc)
+
+add_executable2(fstprune fstprune-main.cc fstprune.cc)
+
+add_executable2(fstpush fstpush-main.cc fstpush.cc)
+
+add_executable2(fstrandgen fstrandgen-main.cc fstrandgen.cc)
+
+add_executable2(fstrelabel fstrelabel-main.cc fstrelabel.cc)
+
+add_executable2(fstreplace fstreplace-main.cc fstreplace.cc)
+
+add_executable2(fstreverse fstreverse-main.cc fstreverse.cc)
+
+add_executable2(fstreweight fstreweight-main.cc fstreweight.cc)
+
+add_executable2(fstrmepsilon fstrmepsilon-main.cc fstrmepsilon.cc)
+
+add_executable2(fstshortestdistance fstshortestdistance-main.cc fstshortestdistance.cc)
+
+add_executable2(fstshortestpath fstshortestpath-main.cc fstshortestpath.cc)
+
+add_executable2(fstsymbols fstsymbols-main.cc fstsymbols.cc)
+
+add_executable2(fstsynchronize fstsynchronize-main.cc fstsynchronize.cc)
+
+add_executable2(fsttopsort fsttopsort-main.cc fsttopsort.cc)
+
+add_executable2(fstunion fstunion-main.cc fstunion.cc)
\ No newline at end of file
diff --git a/src/bin/fstarcsort-main.cc b/src/bin/fstarcsort-main.cc
index 99f931d..e12e72b 100644
--- a/src/bin/fstarcsort-main.cc
+++ b/src/bin/fstarcsort-main.cc
@@ -26,7 +26,7 @@
 #include <fst/script/arcsort.h>
 #include <fst/script/getters.h>
 
-DECLARE_string(sort_type);
+DECLARE_EXE_string(sort_type);
 
 int fstarcsort_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstclosure-main.cc b/src/bin/fstclosure-main.cc
index 5fb199a..3799384 100644
--- a/src/bin/fstclosure-main.cc
+++ b/src/bin/fstclosure-main.cc
@@ -25,7 +25,7 @@
 #include <fst/script/closure.h>
 #include <fst/script/getters.h>
 
-DECLARE_string(closure_type);
+DECLARE_EXE_string(closure_type);
 
 int fstclosure_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstcompile-main.cc b/src/bin/fstcompile-main.cc
index 2adb8ae..da27527 100644
--- a/src/bin/fstcompile-main.cc
+++ b/src/bin/fstcompile-main.cc
@@ -28,16 +28,16 @@
 #include <fstream>
 #include <fst/script/compile.h>
 
-DECLARE_bool(acceptor);
-DECLARE_string(arc_type);
-DECLARE_string(fst_type);
-DECLARE_string(isymbols);
-DECLARE_string(osymbols);
-DECLARE_string(ssymbols);
-DECLARE_bool(keep_isymbols);
-DECLARE_bool(keep_osymbols);
-DECLARE_bool(keep_state_numbering);
-DECLARE_bool(allow_negative_labels);
+DECLARE_EXE_bool(acceptor);
+DECLARE_EXE_string(arc_type);
+DECLARE_EXE_string(fst_type);
+DECLARE_EXE_string(isymbols);
+DECLARE_EXE_string(osymbols);
+DECLARE_EXE_string(ssymbols);
+DECLARE_EXE_bool(keep_isymbols);
+DECLARE_EXE_bool(keep_osymbols);
+DECLARE_EXE_bool(keep_state_numbering);
+DECLARE_EXE_bool(allow_negative_labels);
 
 int fstcompile_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstcompose-main.cc b/src/bin/fstcompose-main.cc
index d7ceddf..2196aee 100644
--- a/src/bin/fstcompose-main.cc
+++ b/src/bin/fstcompose-main.cc
@@ -26,8 +26,8 @@
 #include <fst/script/compose.h>
 #include <fst/script/getters.h>
 
-DECLARE_string(compose_filter);
-DECLARE_bool(connect);
+DECLARE_EXE_string(compose_filter);
+DECLARE_EXE_bool(connect);
 
 int fstcompose_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstconvert-main.cc b/src/bin/fstconvert-main.cc
index b271446..a2dff35 100644
--- a/src/bin/fstconvert-main.cc
+++ b/src/bin/fstconvert-main.cc
@@ -24,7 +24,7 @@
 #include <fst/flags.h>
 #include <fst/script/convert.h>
 
-DECLARE_string(fst_type);
+DECLARE_EXE_string(fst_type);
 
 int fstconvert_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstdeterminize-main.cc b/src/bin/fstdeterminize-main.cc
index 91a940a..65749c5 100644
--- a/src/bin/fstdeterminize-main.cc
+++ b/src/bin/fstdeterminize-main.cc
@@ -25,12 +25,12 @@
 #include <fst/script/determinize.h>
 #include <fst/script/getters.h>
 
-DECLARE_double(delta);
-DECLARE_string(weight);
-DECLARE_int64(nstate);
-DECLARE_int64(subsequential_label);
-DECLARE_string(det_type);
-DECLARE_bool(increment_subsequential_label);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_string(weight);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_int64(subsequential_label);
+DECLARE_EXE_string(det_type);
+DECLARE_EXE_bool(increment_subsequential_label);
 
 int fstdeterminize_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstdifference-main.cc b/src/bin/fstdifference-main.cc
index 52c56c9..d498849 100644
--- a/src/bin/fstdifference-main.cc
+++ b/src/bin/fstdifference-main.cc
@@ -26,8 +26,8 @@
 #include <fst/script/difference.h>
 #include <fst/script/getters.h>
 
-DECLARE_string(compose_filter);
-DECLARE_bool(connect);
+DECLARE_EXE_string(compose_filter);
+DECLARE_EXE_bool(connect);
 
 int fstdifference_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstdisambiguate-main.cc b/src/bin/fstdisambiguate-main.cc
index fda569a..47d3921 100644
--- a/src/bin/fstdisambiguate-main.cc
+++ b/src/bin/fstdisambiguate-main.cc
@@ -24,10 +24,10 @@
 #include <fst/flags.h>
 #include <fst/script/disambiguate.h>
 
-DECLARE_double(delta);
-DECLARE_int64(nstate);
-DECLARE_string(weight);
-DECLARE_int64(subsequential_label);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_string(weight);
+DECLARE_EXE_int64(subsequential_label);
 
 int fstdisambiguate_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstdraw-main.cc b/src/bin/fstdraw-main.cc
index 75b11d8..e2ea042 100644
--- a/src/bin/fstdraw-main.cc
+++ b/src/bin/fstdraw-main.cc
@@ -28,23 +28,23 @@
 #include <fstream>
 #include <fst/script/draw.h>
 
-DECLARE_bool(acceptor);
-DECLARE_string(isymbols);
-DECLARE_string(osymbols);
-DECLARE_string(ssymbols);
-DECLARE_bool(numeric);
-DECLARE_int32(precision);
-DECLARE_string(float_format);
-DECLARE_bool(show_weight_one);
-DECLARE_string(title);
-DECLARE_bool(portrait);
-DECLARE_bool(vertical);
-DECLARE_int32(fontsize);
-DECLARE_double(height);
-DECLARE_double(width);
-DECLARE_double(nodesep);
-DECLARE_double(ranksep);
-DECLARE_bool(allow_negative_labels);
+DECLARE_EXE_bool(acceptor);
+DECLARE_EXE_string(isymbols);
+DECLARE_EXE_string(osymbols);
+DECLARE_EXE_string(ssymbols);
+DECLARE_EXE_bool(numeric);
+DECLARE_EXE_int32(precision);
+DECLARE_EXE_string(float_format);
+DECLARE_EXE_bool(show_weight_one);
+DECLARE_EXE_string(title);
+DECLARE_EXE_bool(portrait);
+DECLARE_EXE_bool(vertical);
+DECLARE_EXE_int32(fontsize);
+DECLARE_EXE_double(height);
+DECLARE_EXE_double(width);
+DECLARE_EXE_double(nodesep);
+DECLARE_EXE_double(ranksep);
+DECLARE_EXE_bool(allow_negative_labels);
 
 int fstdraw_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstencode-main.cc b/src/bin/fstencode-main.cc
index 8680df4..11761f4 100644
--- a/src/bin/fstencode-main.cc
+++ b/src/bin/fstencode-main.cc
@@ -26,10 +26,10 @@
 #include <fst/script/encode.h>
 #include <fst/script/getters.h>
 
-DECLARE_bool(decode);
-DECLARE_bool(encode_labels);
-DECLARE_bool(encode_weights);
-DECLARE_bool(encode_reuse);
+DECLARE_EXE_bool(decode);
+DECLARE_EXE_bool(encode_labels);
+DECLARE_EXE_bool(encode_weights);
+DECLARE_EXE_bool(encode_reuse);
 
 int fstencode_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstepsnormalize-main.cc b/src/bin/fstepsnormalize-main.cc
index b9ad4ec..fe93605 100644
--- a/src/bin/fstepsnormalize-main.cc
+++ b/src/bin/fstepsnormalize-main.cc
@@ -25,7 +25,7 @@
 #include <fst/script/epsnormalize.h>
 #include <fst/script/getters.h>
 
-DECLARE_string(eps_norm_type);
+DECLARE_EXE_string(eps_norm_type);
 
 int fstepsnormalize_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstequal-main.cc b/src/bin/fstequal-main.cc
index 000bed6..d9fcdd5 100644
--- a/src/bin/fstequal-main.cc
+++ b/src/bin/fstequal-main.cc
@@ -25,7 +25,7 @@
 #include <fst/log.h>
 #include <fst/script/equal.h>
 
-DECLARE_double(delta);
+DECLARE_EXE_double(delta);
 
 int fstequal_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstequivalent-main.cc b/src/bin/fstequivalent-main.cc
index b0159d4..3e4f879 100644
--- a/src/bin/fstequivalent-main.cc
+++ b/src/bin/fstequivalent-main.cc
@@ -27,12 +27,12 @@
 #include <fst/script/getters.h>
 #include <fst/script/randequivalent.h>
 
-DECLARE_double(delta);
-DECLARE_bool(random);
-DECLARE_int32(max_length);
-DECLARE_int32(npath);
-DECLARE_uint64(seed);
-DECLARE_string(select);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_bool(random);
+DECLARE_EXE_int32(max_length);
+DECLARE_EXE_int32(npath);
+DECLARE_EXE_uint64(seed);
+DECLARE_EXE_string(select);
 
 int fstequivalent_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstinfo-main.cc b/src/bin/fstinfo-main.cc
index 6e39640..44e6d70 100644
--- a/src/bin/fstinfo-main.cc
+++ b/src/bin/fstinfo-main.cc
@@ -29,10 +29,10 @@
 #include <fst/script/getters.h>
 #include <fst/script/info.h>
 
-DECLARE_string(arc_filter);
-DECLARE_string(info_type);
-DECLARE_bool(test_properties);
-DECLARE_bool(fst_verify);
+DECLARE_EXE_string(arc_filter);
+DECLARE_EXE_string(info_type);
+DECLARE_EXE_bool(test_properties);
+DECLARE_EXE_bool(fst_verify);
 
 namespace {
 // Prints info using only the header of the FST with path `in_name`.
diff --git a/src/bin/fstintersect-main.cc b/src/bin/fstintersect-main.cc
index fe18ad0..e089d31 100644
--- a/src/bin/fstintersect-main.cc
+++ b/src/bin/fstintersect-main.cc
@@ -26,8 +26,8 @@
 #include <fst/script/getters.h>
 #include <fst/script/intersect.h>
 
-DECLARE_string(compose_filter);
-DECLARE_bool(connect);
+DECLARE_EXE_string(compose_filter);
+DECLARE_EXE_bool(connect);
 
 int fstintersect_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstisomorphic-main.cc b/src/bin/fstisomorphic-main.cc
index b4751b2..076209c 100644
--- a/src/bin/fstisomorphic-main.cc
+++ b/src/bin/fstisomorphic-main.cc
@@ -27,7 +27,7 @@
 #include <fst/log.h>
 #include <fst/script/isomorphic.h>
 
-DECLARE_double(delta);
+DECLARE_EXE_double(delta);
 
 int fstisomorphic_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstmap-main.cc b/src/bin/fstmap-main.cc
index a1eb028..38dda1f 100644
--- a/src/bin/fstmap-main.cc
+++ b/src/bin/fstmap-main.cc
@@ -26,10 +26,10 @@
 #include <fst/script/getters.h>
 #include <fst/script/map.h>
 
-DECLARE_double(delta);
-DECLARE_string(map_type);
-DECLARE_double(power);
-DECLARE_string(weight);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_string(map_type);
+DECLARE_EXE_double(power);
+DECLARE_EXE_string(weight);
 
 int fstmap_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstminimize-main.cc b/src/bin/fstminimize-main.cc
index f6e14c1..fc53524 100644
--- a/src/bin/fstminimize-main.cc
+++ b/src/bin/fstminimize-main.cc
@@ -25,8 +25,8 @@
 #include <fst/log.h>
 #include <fst/script/minimize.h>
 
-DECLARE_double(delta);
-DECLARE_bool(allow_nondet);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_bool(allow_nondet);
 
 int fstminimize_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstprint-main.cc b/src/bin/fstprint-main.cc
index cb24ce4..32d0c0e 100644
--- a/src/bin/fstprint-main.cc
+++ b/src/bin/fstprint-main.cc
@@ -28,16 +28,16 @@
 #include <fstream>
 #include <fst/script/print.h>
 
-DECLARE_bool(acceptor);
-DECLARE_string(isymbols);
-DECLARE_string(osymbols);
-DECLARE_string(ssymbols);
-DECLARE_bool(numeric);
-DECLARE_string(save_isymbols);
-DECLARE_string(save_osymbols);
-DECLARE_bool(show_weight_one);
-DECLARE_bool(allow_negative_labels);
-DECLARE_string(missing_symbol);
+DECLARE_EXE_bool(acceptor);
+DECLARE_EXE_string(isymbols);
+DECLARE_EXE_string(osymbols);
+DECLARE_EXE_string(ssymbols);
+DECLARE_EXE_bool(numeric);
+DECLARE_EXE_string(save_isymbols);
+DECLARE_EXE_string(save_osymbols);
+DECLARE_EXE_bool(show_weight_one);
+DECLARE_EXE_bool(allow_negative_labels);
+DECLARE_EXE_string(missing_symbol);
 
 int fstprint_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstproject-main.cc b/src/bin/fstproject-main.cc
index 4399b2d..e3919f1 100644
--- a/src/bin/fstproject-main.cc
+++ b/src/bin/fstproject-main.cc
@@ -25,7 +25,7 @@
 #include <fst/script/getters.h>
 #include <fst/script/project.h>
 
-DECLARE_string(project_type);
+DECLARE_EXE_string(project_type);
 
 int fstproject_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstprune-main.cc b/src/bin/fstprune-main.cc
index 191803f..9af918b 100644
--- a/src/bin/fstprune-main.cc
+++ b/src/bin/fstprune-main.cc
@@ -24,9 +24,9 @@
 #include <fst/flags.h>
 #include <fst/script/prune.h>
 
-DECLARE_double(delta);
-DECLARE_int64(nstate);
-DECLARE_string(weight);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_string(weight);
 
 int fstprune_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstpush-main.cc b/src/bin/fstpush-main.cc
index db813ab..53511ae 100644
--- a/src/bin/fstpush-main.cc
+++ b/src/bin/fstpush-main.cc
@@ -26,12 +26,12 @@
 #include <fst/script/getters.h>
 #include <fst/script/push.h>
 
-DECLARE_double(delta);
-DECLARE_bool(push_weights);
-DECLARE_bool(push_labels);
-DECLARE_bool(remove_total_weight);
-DECLARE_bool(remove_common_affix);
-DECLARE_string(reweight_type);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_bool(push_weights);
+DECLARE_EXE_bool(push_labels);
+DECLARE_EXE_bool(remove_total_weight);
+DECLARE_EXE_bool(remove_common_affix);
+DECLARE_EXE_string(reweight_type);
 
 int fstpush_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstrandgen-main.cc b/src/bin/fstrandgen-main.cc
index cff6c36..f3d3325 100644
--- a/src/bin/fstrandgen-main.cc
+++ b/src/bin/fstrandgen-main.cc
@@ -26,12 +26,12 @@
 #include <fst/script/getters.h>
 #include <fst/script/randgen.h>
 
-DECLARE_int32(max_length);
-DECLARE_int32(npath);
-DECLARE_uint64(seed);
-DECLARE_string(select);
-DECLARE_bool(weighted);
-DECLARE_bool(remove_total_weight);
+DECLARE_EXE_int32(max_length);
+DECLARE_EXE_int32(npath);
+DECLARE_EXE_uint64(seed);
+DECLARE_EXE_string(select);
+DECLARE_EXE_bool(weighted);
+DECLARE_EXE_bool(remove_total_weight);
 
 int fstrandgen_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstrelabel-main.cc b/src/bin/fstrelabel-main.cc
index 22c9b75..226cae7 100644
--- a/src/bin/fstrelabel-main.cc
+++ b/src/bin/fstrelabel-main.cc
@@ -29,15 +29,15 @@
 #include <fst/script/relabel.h>
 #include <fst/script/weight-class.h>
 
-DECLARE_string(isymbols);
-DECLARE_string(osymbols);
-DECLARE_string(relabel_isymbols);
-DECLARE_string(relabel_osymbols);
-DECLARE_string(relabel_ipairs);
-DECLARE_string(relabel_opairs);
-DECLARE_string(unknown_isymbol);
-DECLARE_string(unknown_osymbol);
-DECLARE_bool(allow_negative_labels);
+DECLARE_EXE_string(isymbols);
+DECLARE_EXE_string(osymbols);
+DECLARE_EXE_string(relabel_isymbols);
+DECLARE_EXE_string(relabel_osymbols);
+DECLARE_EXE_string(relabel_ipairs);
+DECLARE_EXE_string(relabel_opairs);
+DECLARE_EXE_string(unknown_isymbol);
+DECLARE_EXE_string(unknown_osymbol);
+DECLARE_EXE_bool(allow_negative_labels);
 
 int fstrelabel_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstreplace-main.cc b/src/bin/fstreplace-main.cc
index 5676e1c..bb9e396 100644
--- a/src/bin/fstreplace-main.cc
+++ b/src/bin/fstreplace-main.cc
@@ -29,10 +29,10 @@
 #include <fst/script/getters.h>
 #include <fst/script/replace.h>
 
-DECLARE_string(call_arc_labeling);
-DECLARE_string(return_arc_labeling);
-DECLARE_int64(return_label);
-DECLARE_bool(epsilon_on_replace);
+DECLARE_EXE_string(call_arc_labeling);
+DECLARE_EXE_string(return_arc_labeling);
+DECLARE_EXE_int64(return_label);
+DECLARE_EXE_bool(epsilon_on_replace);
 
 int fstreplace_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstreverse-main.cc b/src/bin/fstreverse-main.cc
index 41570f9..f5a51f4 100644
--- a/src/bin/fstreverse-main.cc
+++ b/src/bin/fstreverse-main.cc
@@ -25,7 +25,7 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/reverse.h>
 
-DECLARE_bool(require_superinitial);
+DECLARE_EXE_bool(require_superinitial);
 
 int fstreverse_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstreweight-main.cc b/src/bin/fstreweight-main.cc
index 5638b54..82f6dfa 100644
--- a/src/bin/fstreweight-main.cc
+++ b/src/bin/fstreweight-main.cc
@@ -27,7 +27,7 @@
 #include <fst/script/reweight.h>
 #include <fst/script/text-io.h>
 
-DECLARE_string(reweight_type);
+DECLARE_EXE_string(reweight_type);
 
 int fstreweight_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstrmepsilon-main.cc b/src/bin/fstrmepsilon-main.cc
index 6bbb9f2..c8758f4 100644
--- a/src/bin/fstrmepsilon-main.cc
+++ b/src/bin/fstrmepsilon-main.cc
@@ -26,11 +26,11 @@
 #include <fst/script/getters.h>
 #include <fst/script/rmepsilon.h>
 
-DECLARE_bool(connect);
-DECLARE_double(delta);
-DECLARE_int64(nstate);
-DECLARE_string(queue_type);
-DECLARE_string(weight);
+DECLARE_EXE_bool(connect);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_string(queue_type);
+DECLARE_EXE_string(weight);
 
 int fstrmepsilon_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstshortestdistance-main.cc b/src/bin/fstshortestdistance-main.cc
index f505137..83924c8 100644
--- a/src/bin/fstshortestdistance-main.cc
+++ b/src/bin/fstshortestdistance-main.cc
@@ -29,10 +29,10 @@
 #include <fst/script/shortest-distance.h>
 #include <fst/script/text-io.h>
 
-DECLARE_bool(reverse);
-DECLARE_double(delta);
-DECLARE_int64(nstate);
-DECLARE_string(queue_type);
+DECLARE_EXE_bool(reverse);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_string(queue_type);
 
 int fstshortestdistance_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstshortestpath-main.cc b/src/bin/fstshortestpath-main.cc
index 65adf65..2a0fd15 100644
--- a/src/bin/fstshortestpath-main.cc
+++ b/src/bin/fstshortestpath-main.cc
@@ -27,12 +27,12 @@
 #include <fst/script/getters.h>
 #include <fst/script/shortest-path.h>
 
-DECLARE_double(delta);
-DECLARE_int32(nshortest);
-DECLARE_int64(nstate);
-DECLARE_string(queue_type);
-DECLARE_bool(unique);
-DECLARE_string(weight);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_int32(nshortest);
+DECLARE_EXE_int64(nstate);
+DECLARE_EXE_string(queue_type);
+DECLARE_EXE_bool(unique);
+DECLARE_EXE_string(weight);
 
 int fstshortestpath_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/bin/fstsymbols-main.cc b/src/bin/fstsymbols-main.cc
index 483f0f9..9fb1b0b 100644
--- a/src/bin/fstsymbols-main.cc
+++ b/src/bin/fstsymbols-main.cc
@@ -30,16 +30,16 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/verify.h>
 
-DECLARE_string(isymbols);
-DECLARE_string(osymbols);
-DECLARE_bool(clear_isymbols);
-DECLARE_bool(clear_osymbols);
-DECLARE_string(relabel_ipairs);
-DECLARE_string(relabel_opairs);
-DECLARE_string(save_isymbols);
-DECLARE_string(save_osymbols);
-DECLARE_bool(allow_negative_labels);
-DECLARE_bool(verify);
+DECLARE_EXE_string(isymbols);
+DECLARE_EXE_string(osymbols);
+DECLARE_EXE_bool(clear_isymbols);
+DECLARE_EXE_bool(clear_osymbols);
+DECLARE_EXE_string(relabel_ipairs);
+DECLARE_EXE_string(relabel_opairs);
+DECLARE_EXE_string(save_isymbols);
+DECLARE_EXE_string(save_osymbols);
+DECLARE_EXE_bool(allow_negative_labels);
+DECLARE_EXE_bool(verify);
 
 int fstsymbols_main(int argc, char **argv) {
   namespace s = fst::script;
diff --git a/src/extensions/CMakeLists.txt b/src/extensions/CMakeLists.txt
new file mode 100644
index 0000000..094ab74
--- /dev/null
+++ b/src/extensions/CMakeLists.txt
@@ -0,0 +1,43 @@
+if(HAVE_COMPACT)
+  add_subdirectory(compact)
+endif(HAVE_COMPACT)
+
+if(HAVE_COMPRESS)
+  add_subdirectory(compress)
+endif(HAVE_COMPRESS)
+
+if(HAVE_CONST)
+  add_subdirectory(const)
+endif(HAVE_CONST)
+
+if(HAVE_FAR OR HAVE_GRM)
+  add_subdirectory(far)
+endif(HAVE_FAR OR HAVE_GRM)
+
+if(HAVE_LINEAR)
+  add_subdirectory(linear)
+endif(HAVE_LINEAR)
+
+if(HAVE_LOOKAHEAD)
+  add_subdirectory(lookahead)
+endif(HAVE_LOOKAHEAD)
+
+if(HAVE_MPDT OR HAVE_GRM)
+  add_subdirectory(mpdt)
+endif(HAVE_MPDT OR HAVE_GRM)
+
+if(HAVE_NGRAM)
+  add_subdirectory(ngram)
+endif(HAVE_NGRAM)
+
+if(HAVE_PYTHON)
+  add_subdirectory(python)
+endif(HAVE_PYTHON)
+
+if(HAVE_PDT OR HAVE_MPDT OR HAVE_GRM)
+  add_subdirectory(pdt)
+endif(HAVE_PDT OR HAVE_MPDT OR HAVE_GRM)
+
+if(HAVE_SPECIAL)
+  add_subdirectory(special)
+endif(HAVE_SPECIAL)
\ No newline at end of file
diff --git a/src/extensions/compact/CMakeLists.txt b/src/extensions/compact/CMakeLists.txt
new file mode 100644
index 0000000..4ff4b6b
--- /dev/null
+++ b/src/extensions/compact/CMakeLists.txt
@@ -0,0 +1,92 @@
+add_library(fstcompact
+  compact8_acceptor-fst.cc 
+  compact8_string-fst.cc 
+  compact8_unweighted-fst.cc 
+  compact8_unweighted_acceptor-fst.cc 
+  compact8_weighted_string-fst.cc 
+  compact16_acceptor-fst.cc 
+  compact16_string-fst.cc 
+  compact16_unweighted-fst.cc 
+  compact16_unweighted_acceptor-fst.cc 
+  compact16_weighted_string-fst.cc 
+  compact64_acceptor-fst.cc 
+  compact64_string-fst.cc 
+  compact64_unweighted-fst.cc 
+  compact64_unweighted_acceptor-fst.cc 
+  compact64_weighted_string-fst.cc
+)
+
+target_link_libraries(fstcompact fst)
+set_target_properties(fstcompact PROPERTIES 
+  SOVERSION "${SOVERSION}"
+  FOLDER compact
+)
+
+install(TARGETS fstcompact 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin
+)
+
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+        set_target_properties(${_name} PROPERTIES 
+            WINDOWS_EXPORT_ALL_SYMBOLS true
+            FOLDER compact/modules
+        )
+    endif()
+
+    #set_target_properties(${_name} PROPERTIES SOVERSION "1")
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin)
+endfunction()
+
+add_module(compact8_acceptor-fst MODULE
+  compact8_acceptor-fst.cc)
+ 
+add_module(compact8_string-fst MODULE
+  compact8_string-fst.cc)
+ 
+add_module(compact8_unweighted-fst MODULE
+  compact8_unweighted-fst.cc)
+ 
+add_module(compact8_unweighted_acceptor-fst MODULE
+  compact8_unweighted_acceptor-fst.cc)
+ 
+add_module(compact8_weighted_string-fst MODULE
+  compact8_weighted_string-fst.cc)
+ 
+add_module(compact16_acceptor-fst MODULE
+  compact16_acceptor-fst.cc)
+ 
+add_module(compact16_string-fst MODULE
+  compact16_string-fst.cc)
+ 
+add_module(compact16_unweighted-fst MODULE
+  compact16_unweighted-fst.cc)
+ 
+add_module(compact16_unweighted_acceptor-fst MODULE
+  compact16_unweighted_acceptor-fst.cc)
+ 
+add_module(compact16_weighted_string-fst MODULE
+  compact16_weighted_string-fst.cc)
+ 
+add_module(compact64_acceptor-fst MODULE
+  compact64_acceptor-fst.cc)
+ 
+add_module(compact64_string-fst MODULE
+  compact64_string-fst.cc)
+ 
+add_module(compact64_unweighted-fst MODULE
+  compact64_unweighted-fst.cc)
+ 
+add_module(compact64_unweighted_acceptor-fst MODULE
+  compact64_unweighted_acceptor-fst.cc)
+ 
+add_module(compact64_weighted_string-fst MODULE
+  compact64_weighted_string-fst.cc)
+
diff --git a/src/extensions/compress/CMakeLists.txt b/src/extensions/compress/CMakeLists.txt
new file mode 100644
index 0000000..f205aaa
--- /dev/null
+++ b/src/extensions/compress/CMakeLists.txt
@@ -0,0 +1,40 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/compress/*.h)
+
+add_library(fstcompressscript
+  compressscript.cc
+  ${HEADER_FILES}
+ )
+
+target_link_libraries(fstcompressscript
+  fstscript
+  fst
+  ${ZLIBS}
+)
+set_target_properties(fstcompressscript PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+install(TARGETS fstcompressscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+ )
+
+if(HAVE_BIN)
+  add_executable(fstcompress
+    fstcompress.cc
+    fstcompress-main.cc)
+
+  target_link_libraries(fstcompress
+    fstcompressscript
+    fstscript
+    fst
+    ${ZLIBS}
+    ${CMAKE_DL_LIBS}
+   )
+
+  install(TARGETS fstcompress
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin
+		)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/const/CMakeLists.txt b/src/extensions/const/CMakeLists.txt
new file mode 100644
index 0000000..61060b8
--- /dev/null
+++ b/src/extensions/const/CMakeLists.txt
@@ -0,0 +1,38 @@
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+        set_target_properties(${_name} PROPERTIES 
+            WINDOWS_EXPORT_ALL_SYMBOLS true
+            FOLDER constant/modules
+        )
+    endif()
+
+    install(TARGETS ${_name}
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin)
+endfunction()
+
+
+add_module(const8-fst MODULE const8-fst.cc)
+
+add_module(const16-fst MODULE const16-fst.cc)
+
+add_module(const64-fst MODULE const64-fst.cc)
+
+add_library(fstconst 
+  const8-fst.cc 
+  const16-fst.cc 
+  const64-fst.cc)
+target_link_libraries(fstconst fst)
+set_target_properties(fstconst PROPERTIES
+  SOVERSION "${SOVERSION}"
+  FOLDER constant
+)
+
+install(TARGETS fstconst 
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+ )
\ No newline at end of file
diff --git a/src/extensions/far/CMakeLists.txt b/src/extensions/far/CMakeLists.txt
new file mode 100644
index 0000000..1e367b1
--- /dev/null
+++ b/src/extensions/far/CMakeLists.txt
@@ -0,0 +1,61 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/far/*.h)
+
+add_library(fstfar
+  sttable.cc
+  stlist.cc
+  ${HEADER_FILES}
+)
+target_link_libraries(fstfar fst)
+set_target_properties(fstfar PROPERTIES 
+  SOVERSION "${SOVERSION}"
+  FOLDER far
+)
+
+install(TARGETS fstfar
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+
+if(HAVE_SCRIPT)
+  add_library(fstfarscript
+    compile-strings.cc 
+    far-class.cc 
+    farscript.cc
+    getters.cc 
+    script-impl.cc
+  )
+  target_link_libraries(fstfarscript fstfar fstscript fstscriptutils fst ${CMAKE_DL_LIBS})
+  set_target_properties(fstfarscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+    FOLDER far
+  )
+
+  install(TARGETS fstfarscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+          target_link_libraries(${_name} fstfarscript fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+          set_target_properties(${_name} PROPERTIES FOLDER far/bin)
+      endif()
+      install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+
+  add_executable2(farcompilestrings farcompilestrings.cc farcompilestrings-main.cc)
+  add_executable2(farcreate  farcreate.cc farcreate-main.cc)
+  add_executable2(farconvert  farconvert.cc farconvert-main.cc)
+  add_executable2(farencode  farencode.cc farencode-main.cc)
+  add_executable2(farequal  farequal.cc farequal-main.cc)
+  add_executable2(farextract  farextract.cc farextract-main.cc)
+  add_executable2(farinfo  farinfo.cc farinfo-main.cc)
+  add_executable2(farisomorphic  farisomorphic.cc  farisomorphic-main.cc)
+  add_executable2(farprintstrings  farprintstrings.cc farprintstrings-main.cc)
+endif(HAVE_BIN)
+
diff --git a/src/extensions/linear/CMakeLists.txt b/src/extensions/linear/CMakeLists.txt
new file mode 100644
index 0000000..77c56ae
--- /dev/null
+++ b/src/extensions/linear/CMakeLists.txt
@@ -0,0 +1,77 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/linear/*.h)
+
+
+if(HAVE_SCRIPT)
+  add_library(fstlinearscript
+    linearscript.cc
+    ${HEADER_FILES}
+  )
+  target_link_libraries(fstlinearscript
+    fstscript
+    fstscriptutils
+    fst
+  )
+  set_target_properties(fstlinearscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+    FOLDER linear
+  )
+  
+  install(TARGETS fstlinearscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  add_executable(fstlinear
+    fstlinear.cc 
+    fstlinear-main.cc)
+  target_link_libraries(fstlinear
+    fstlinearscript
+    fstscriptutils
+    fstscript 
+    fst
+    ${CMAKE_DL_LIBS}
+ )
+
+  add_executable(fstloglinearapply
+    fstloglinearapply.cc 
+    fstloglinearapply-main.cc)
+  target_link_libraries(fstloglinearapply
+    fstlinearscript
+    fstscriptutils
+    fstscript 
+    fst
+    ${CMAKE_DL_LIBS}
+  )
+  install(TARGETS fstlinear fstloglinearapply
+    RUNTIME DESTINATION bin
+  )
+  set_target_properties(fstlinear fstloglinearapply PROPERTIES
+    FOLDER linear/bin
+  )
+endif(HAVE_BIN)
+
+
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+        set_target_properties(${_name} PROPERTIES 
+            WINDOWS_EXPORT_ALL_SYMBOLS true
+            FOLDER linear/modules
+        )
+    endif()
+
+    install(TARGETS ${_name}
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin)
+endfunction()
+
+add_module(linear-tagger-fst MODULE
+  linear-tagger-fst.cc)
+
+add_module(linear-classifier-fst MODULE
+  linear-classifier-fst.cc)
diff --git a/src/extensions/lookahead/CMakeLists.txt b/src/extensions/lookahead/CMakeLists.txt
new file mode 100644
index 0000000..4abe5a3
--- /dev/null
+++ b/src/extensions/lookahead/CMakeLists.txt
@@ -0,0 +1,41 @@
+add_library(fstlookahead
+  arc_lookahead-fst.cc 
+  ilabel_lookahead-fst.cc
+  olabel_lookahead-fst.cc
+)
+target_link_libraries(fstlookahead fst)
+set_target_properties(fstlookahead PROPERTIES 
+  SOVERSION "${SOVERSION}"
+  FOLDER lookahead  
+)
+
+install(TARGETS fstlookahead 
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+  
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+    set_target_properties(${_name} PROPERTIES 
+        WINDOWS_EXPORT_ALL_SYMBOLS true
+        FOLDER lookahead/modules
+    )
+
+    install(TARGETS ${_name}
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin)
+endfunction()
+  
+add_module(arc_lookahead-fst MODULE
+  arc_lookahead-fst.cc)
+ 
+add_module(ilabel_lookahead-fst MODULE
+  ilabel_lookahead-fst.cc)
+
+add_module(olabel_lookahead-fst MODULE
+  olabel_lookahead-fst.cc)
\ No newline at end of file
diff --git a/src/extensions/mpdt/CMakeLists.txt b/src/extensions/mpdt/CMakeLists.txt
new file mode 100644
index 0000000..54a06a1
--- /dev/null
+++ b/src/extensions/mpdt/CMakeLists.txt
@@ -0,0 +1,32 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/mpdt/*.h)
+
+if(HAVE_SCRIPT)
+  add_library(fstmpdtscript mpdtscript.cc ${HEADER_FILES})
+  target_link_libraries(fstmpdtscript fstscript fstscriptutils fst)
+  set_target_properties(fstmpdtscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+    FOLDER mpdt
+  )
+  install(TARGETS fstmpdtscript 
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+          target_link_libraries(${_name} fstmpdtscript fstpdtscript fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+          set_target_properties(${_name} PROPERTIES
+            FOLDER mpdt/bin
+          )
+      endif()
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+  add_executable2(mpdtcompose  mpdtcompose.cc mpdtcompose-main.cc)
+  add_executable2(mpdtexpand  mpdtexpand.cc mpdtexpand-main.cc)
+  add_executable2(mpdtinfo  mpdtinfo.cc mpdtinfo-main.cc)
+  add_executable2(mpdtreverse  mpdtreverse.cc mpdtreverse-main.cc)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/ngram/CMakeLists.txt b/src/extensions/ngram/CMakeLists.txt
new file mode 100644
index 0000000..f83f6fa
--- /dev/null
+++ b/src/extensions/ngram/CMakeLists.txt
@@ -0,0 +1,44 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/ngram/*.h)
+
+add_library(fstngram
+    bitmap-index.cc 
+    ngram-fst.cc 
+    nthbit.cc
+    ${HEADER_FILES}
+)
+
+target_link_libraries(fstngram
+    fst
+)
+
+set_target_properties(fstngram PROPERTIES
+  SOVERSION "${SOVERSION}"
+  FOLDER ngram
+)
+
+install(TARGETS fstngram 
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+
+add_library(ngram_fst MODULE
+    bitmap-index.cc 
+    ngram-fst.cc 
+    nthbit.cc
+)
+
+set_target_properties(ngram_fst PROPERTIES
+    WINDOWS_EXPORT_ALL_SYMBOLS true
+    FOLDER ngram/modules
+)
+
+target_link_libraries(ngram_fst
+    fst
+)
+
+install(TARGETS ngram_fst
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
\ No newline at end of file
diff --git a/src/extensions/ngram/bitmap-index.cc b/src/extensions/ngram/bitmap-index.cc
index 2d11dc5..0d68c57 100644
--- a/src/extensions/ngram/bitmap-index.cc
+++ b/src/extensions/ngram/bitmap-index.cc
@@ -21,6 +21,7 @@
 #include <cstdint>
 #include <iterator>
 
+#include <fst/compat.h>
 #include <fst/log.h>
 #include <fst/extensions/ngram/nthbit.h>
 
@@ -43,7 +44,7 @@ size_t BitmapIndex::Rank1(size_t end) const {
   // this depend on whether there's a popcnt instruction?
   if (bit_index == 0) return sum;  // Entire answer is in the index.
   const uint64_t mask = (uint64_t{1} << bit_index) - 1;
-  return sum + __builtin_popcountll(bits_[end_word] & mask);
+  return sum + popcountll(bits_[end_word] & mask);
 }
 
 size_t BitmapIndex::Select1(size_t bit_index) const {
@@ -201,7 +202,7 @@ std::pair<size_t, size_t> BitmapIndex::Select0s(size_t bit_index) const {
   // If this is 0, then the next zero is not in the same word.
   if (masked_inv_word != 0) {
     // We can't ctz on 0, but we already checked that.
-    const int next_nth = __builtin_ctzll(masked_inv_word);
+    const int next_nth = ctzll(masked_inv_word);
     return {kStorageBitSize * word_index + nth,
             kStorageBitSize * word_index + next_nth};
   } else {
@@ -306,7 +307,7 @@ void BitmapIndex::BuildIndex(const uint64_t* bits, size_t num_bits,
 
     // We can assume that the last word has zeros in the high bits.
     const uint64_t word = bits[word_index];
-    const int word_ones_count = __builtin_popcountll(word);
+    const int word_ones_count = popcountll(word);
     const uint32_t bit_offset = kStorageBitSize * word_index;
 
     if (enable_select_0_index) {
diff --git a/src/extensions/ngram/nthbit.cc b/src/extensions/ngram/nthbit.cc
index fdbf304..a716ef3 100644
--- a/src/extensions/ngram/nthbit.cc
+++ b/src/extensions/ngram/nthbit.cc
@@ -235,7 +235,7 @@ static const uint8_t nth_bit_bit_pos[8][256] = {
 uint32_t nth_bit(const uint64_t v, uint32_t r) {
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
   uint32_t next_byte = v & 255;
   uint32_t byte_popcount = nth_bit_bit_count[next_byte];
diff --git a/src/extensions/pdt/CMakeLists.txt b/src/extensions/pdt/CMakeLists.txt
new file mode 100644
index 0000000..643b578
--- /dev/null
+++ b/src/extensions/pdt/CMakeLists.txt
@@ -0,0 +1,36 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/pdt/*.h)
+
+if(HAVE_SCRIPT)
+  add_library(fstpdtscript getters.cc pdtscript.cc ${HEADER_FILES})
+  target_link_libraries(fstpdtscript fstscript fstscriptutils fst)
+  set_target_properties(fstpdtscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+    FOLDER pdt
+  )
+
+  install(TARGETS fstpdtscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+          target_link_libraries(${_name} fstpdtscript fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+          set_target_properties(${_name} PROPERTIES
+            FOLDER pdt/bin
+          )
+      endif()
+      install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+
+  add_executable2(pdtcompose  pdtcompose.cc pdtcompose-main.cc)
+  add_executable2(pdtexpand  pdtexpand.cc pdtexpand-main.cc)
+  add_executable2(pdtinfo  pdtinfo.cc pdtinfo-main.cc)
+  add_executable2(pdtreplace  pdtreplace.cc pdtreplace-main.cc)
+  add_executable2(pdtreverse  pdtreverse.cc pdtreverse-main.cc)
+  add_executable2(pdtshortestpath  pdtshortestpath.cc pdtshortestpath-main.cc)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/python/CMakeLists.txt b/src/extensions/python/CMakeLists.txt
new file mode 100644
index 0000000..83b9a7f
--- /dev/null
+++ b/src/extensions/python/CMakeLists.txt
@@ -0,0 +1,22 @@
+
+add_library(pywrapfst
+    pywrapfst.cpp
+)
+
+target_link_libraries(pywrapfst
+    fst
+    fstfarscript
+    fstfar
+    fstscript
+)
+
+set_target_properties(pywrapfst PROPERTIES
+  SOVERSION "${SOVERSION}"
+  FOLDER python
+)
+
+install(TARGETS pywrapfst 
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib
+	RUNTIME DESTINATION lib
+)
\ No newline at end of file
diff --git a/src/extensions/special/CMakeLists.txt b/src/extensions/special/CMakeLists.txt
new file mode 100644
index 0000000..a7149a8
--- /dev/null
+++ b/src/extensions/special/CMakeLists.txt
@@ -0,0 +1,59 @@
+file(GLOB HEADER_FILES ../../include/fst/extensions/special/*.h)
+
+if(HAVE_BIN)
+  add_executable(fstspecial-bin
+    ../../bin/fstconvert.cc 
+    ../../bin/fstconvert-main.cc
+    phi-fst.cc
+    rho-fst.cc
+    sigma-fst.cc
+  )
+
+  set_target_properties(fstspecial-bin PROPERTIES 
+    OUTPUT_NAME fstspecial
+  )
+
+  target_link_libraries(fstspecial-bin
+    fstscript
+    fst
+    ${CMAKE_DL_LIBS}
+ )
+endif(HAVE_BIN)
+
+
+add_library(fstspecial
+  phi-fst.cc
+  rho-fst.cc
+  sigma-fst.cc
+  ${HEADER_FILES}
+)
+
+set_target_properties(fstspecial PROPERTIES
+  SOVERSION "${SOVERSION}"
+  FOLDER special
+)
+target_link_libraries(fstspecial
+  fst
+)
+
+install(TARGETS fstspecial fstspecial-bin
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+
+    install(TARGETS ${_name}
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin)
+endfunction()
+
+add_module(phi-fst MODULE phi-fst.cc)
+add_module(rho-fst MODULE rho-fst.cc)
+add_module(sigma-fst MODULE sigma-fst.cc)
\ No newline at end of file
diff --git a/src/include/fst/compat.h b/src/include/fst/compat.h
index b7f2087..98c4e73 100644
--- a/src/include/fst/compat.h
+++ b/src/include/fst/compat.h
@@ -42,6 +42,28 @@
 
 void FailedNewHandler();
 
+#ifdef _WIN32
+
+inline uint64_t ctzll(uint64_t input_int) {
+  return  _tzcnt_u64(input_int);
+}
+
+inline uint64_t popcountll(uint64_t input_int) {
+  return  __popcnt64(input_int);
+}
+
+#else
+
+inline uint64_t ctzll(uint64_t input_int) {
+  return  __builtin_ctzll(input_int);
+}
+
+inline uint64_t popcountll(uint64_t input_int) {
+  return  __builtin_popcountll(input_int);
+}
+
+#endif
+
 namespace fst {
 
 // Downcasting.
diff --git a/src/include/fst/extensions/far/compile-strings.h b/src/include/fst/extensions/far/compile-strings.h
index f5d1e06..0f66b96 100644
--- a/src/include/fst/extensions/far/compile-strings.h
+++ b/src/include/fst/extensions/far/compile-strings.h
@@ -17,9 +17,6 @@
 
 #ifndef FST_EXTENSIONS_FAR_COMPILE_STRINGS_H_
 #define FST_EXTENSIONS_FAR_COMPILE_STRINGS_H_
-
-#include <libgen.h>
-
 #include <cstdint>
 #include <fstream>
 #include <istream>
diff --git a/src/include/fst/extensions/far/create.h b/src/include/fst/extensions/far/create.h
index 4874d4e..22cbb18 100644
--- a/src/include/fst/extensions/far/create.h
+++ b/src/include/fst/extensions/far/create.h
@@ -20,7 +20,6 @@
 #ifndef FST_EXTENSIONS_FAR_CREATE_H_
 #define FST_EXTENSIONS_FAR_CREATE_H_
 
-#include <libgen.h>
 
 #include <cstdint>
 #include <sstream>
diff --git a/src/include/fst/extensions/far/far.h b/src/include/fst/extensions/far/far.h
index c1d3ae3..f8e65bd 100644
--- a/src/include/fst/extensions/far/far.h
+++ b/src/include/fst/extensions/far/far.h
@@ -36,6 +36,16 @@
 #include <fst/vector-fst.h>
 #include <string_view>
 
+#ifdef _WIN32
+
+inline std::string basename(std::string const & path)
+{
+  return path.substr(path.find_last_of("/\\") + 1);
+}
+#else
+#include <libgen.h>
+#endif
+
 namespace fst {
 
 enum class FarEntryType { LINE, FILE };
diff --git a/src/include/fst/extensions/ngram/bitmap-index.h b/src/include/fst/extensions/ngram/bitmap-index.h
index 26e8498..734ef4a 100644
--- a/src/include/fst/extensions/ngram/bitmap-index.h
+++ b/src/include/fst/extensions/ngram/bitmap-index.h
@@ -86,6 +86,8 @@
 //
 // The select indices have 6.25% overhead together.
 
+
+
 namespace fst {
 
 class BitmapIndex {
diff --git a/src/include/fst/extensions/ngram/nthbit.h b/src/include/fst/extensions/ngram/nthbit.h
index 13018f2..c5165f6 100644
--- a/src/include/fst/extensions/ngram/nthbit.h
+++ b/src/include/fst/extensions/ngram/nthbit.h
@@ -24,6 +24,7 @@
 #include <arm_neon.h>
 #endif
 
+#include <fst/compat.h>
 #include <fst/log.h>
 
 #if defined(__BMI2__)  // Intel Bit Manipulation Instruction Set 2
@@ -37,12 +38,12 @@ namespace fst {
 inline uint32_t nth_bit(uint64_t v, uint32_t r) {
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
   // PDEP example from https://stackoverflow.com/a/27453505
   // __builtin_ctzll is UB for 0, but the conditions above ensure that can't
   // happen.
-  return __builtin_ctzll(_pdep_u64(uint64_t{1} << r, v));
+  return popcountll(_pdep_u64(uint64_t{1} << r, v));
 }
 }  // namespace fst
 
@@ -77,7 +78,7 @@ inline uint32_t nth_bit(const uint64_t v, const uint32_t r) {
 
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
 #if defined(__aarch64__)
   // Use the ARM64 CNT instruction to compute a byte-wise popcount.
@@ -104,7 +105,7 @@ inline uint32_t nth_bit(const uint64_t v, const uint32_t r) {
   // The first bit set is the high bit in the byte, so
   // num_trailing_zeros == 8 * byte_nr + 7 and the byte number is the
   // number of trailing zeros divided by 8.
-  const int byte_nr = __builtin_ctzll(b) >> 3;
+  const int byte_nr = ctzll(b) >> 3;
   const int shift = byte_nr << 3;
   // The top byte contains the whole-word popcount; we never need that.
   byte_sums <<= 8;
diff --git a/src/include/fst/flags.h b/src/include/fst/flags.h
index 9c419ce..88e0be8 100644
--- a/src/include/fst/flags.h
+++ b/src/include/fst/flags.h
@@ -31,6 +31,7 @@
 #include <utility>
 
 #include <fst/lock.h>
+#include <fst/fst_Export.h>
 
 // FLAGS USAGE:
 //
@@ -49,12 +50,19 @@
 //
 // ShowUsage() can be used to print out command and flag usage.
 
-#define DECLARE_bool(name) extern bool FST_FLAGS_ ## name
-#define DECLARE_string(name) extern std::string FST_FLAGS_##name
-#define DECLARE_int32(name) extern int32_t FST_FLAGS_##name
-#define DECLARE_int64(name) extern int64_t FST_FLAGS_##name
-#define DECLARE_uint64(name) extern uint64_t FST_FLAGS_##name
-#define DECLARE_double(name) extern double FST_FLAGS_ ## name
+#define DECLARE_bool(name) extern bool fst_EXPORT FST_FLAGS_ ## name
+#define DECLARE_string(name) extern std::string fst_EXPORT FST_FLAGS_##name
+#define DECLARE_int32(name) extern int32_t fst_EXPORT FST_FLAGS_##name
+#define DECLARE_int64(name) extern int64_t fst_EXPORT FST_FLAGS_##name
+#define DECLARE_uint64(name) extern uint64_t fst_EXPORT FST_FLAGS_##name
+#define DECLARE_double(name) extern double fst_EXPORT FST_FLAGS_ ## name
+
+#define DECLARE_EXE_bool(name) extern bool FST_FLAGS_ ## name
+#define DECLARE_EXE_string(name) extern std::string FST_FLAGS_##name
+#define DECLARE_EXE_int32(name) extern int32_t FST_FLAGS_##name
+#define DECLARE_EXE_int64(name) extern int64_t FST_FLAGS_##name
+#define DECLARE_EXE_uint64(name) extern uint64_t FST_FLAGS_##name
+#define DECLARE_EXE_double(name) extern double FST_FLAGS_ ## name
 
 template <typename T>
 struct FlagDescription {
@@ -202,7 +210,7 @@ class FlagRegisterer {
 
 #define DEFINE_bool(name, value, doc) DEFINE_VAR(bool, name, value, doc)
 #define DEFINE_string(name, value, doc) \
-  DEFINE_VAR(std::string, name, value, doc)
+ DEFINE_VAR(std::string, name, value, doc)
 #define DEFINE_int32(name, value, doc) DEFINE_VAR(int32_t, name, value, doc)
 #define DEFINE_int64(name, value, doc) DEFINE_VAR(int64_t, name, value, doc)
 #define DEFINE_uint64(name, value, doc) DEFINE_VAR(uint64_t, name, value, doc)
diff --git a/src/include/fst/properties.h b/src/include/fst/properties.h
index c7a110d..99d26fd 100644
--- a/src/include/fst/properties.h
+++ b/src/include/fst/properties.h
@@ -28,6 +28,7 @@
 #include <fst/compat.h>
 #include <fst/log.h>
 #include <string_view>
+#include <fst/fst_Export.h>
 
 namespace fst {
 
@@ -491,7 +492,7 @@ uint64_t AddArcProperties(uint64_t inprops, typename Arc::StateId s,
 
 namespace internal {
 
-extern const std::string_view PropertyNames[];
+extern const std::string_view fst_EXPORT PropertyNames[];
 
 // For a binary property, the bit is always returned set. For a trinary (i.e.,
 // two-bit) property, both bits are returned set iff either corresponding input
diff --git a/src/include/fst/register.h b/src/include/fst/register.h
index af1b360..650f8a4 100644
--- a/src/include/fst/register.h
+++ b/src/include/fst/register.h
@@ -83,7 +83,7 @@ class FstRegister : public GenericRegister<std::string, FstRegisterEntry<Arc>,
 // The type must have a default constructor and a copy constructor from
 // Fst<Arc>.
 template <class FST>
-class FstRegisterer : public GenericRegisterer<FstRegister<typename FST::Arc>> {
+class  FstRegisterer : public GenericRegisterer<FstRegister<typename FST::Arc>> {
  public:
   using Arc = typename FST::Arc;
   using Entry = typename FstRegister<Arc>::Entry;
diff --git a/src/include/fst/script/info-impl.h b/src/include/fst/script/info-impl.h
index 7e485c9..e0173c2 100644
--- a/src/include/fst/script/info-impl.h
+++ b/src/include/fst/script/info-impl.h
@@ -29,6 +29,7 @@
 #include <fst/connect.h>
 #include <fst/dfs-visit.h>
 #include <fst/fst.h>
+#include <fst/properties.h>
 #include <fst/lookahead-matcher.h>
 #include <fst/matcher.h>
 #include <fst/queue.h>
diff --git a/src/include/fst/symbol-table.h b/src/include/fst/symbol-table.h
index 77728b5..d8aad63 100644
--- a/src/include/fst/symbol-table.h
+++ b/src/include/fst/symbol-table.h
@@ -42,6 +42,14 @@
 #include <string_view>
 #include <fst/lock.h>
 
+template class std::allocator<int>;
+template class std::vector<int>;
+template class std::string;
+template class std::vector<std::string>;
+template class std::basic_string<char>;
+template class std::vector<int64_t>;
+template class std::map<int64_t, int64_t>;
+
 DECLARE_bool(fst_compat_symbols);
 
 namespace fst {
@@ -152,6 +160,9 @@ class SymbolTableImplBase {
   virtual bool IsMutable() const = 0;
 };
 
+
+template class std::shared_ptr<internal::SymbolTableImplBase>;
+
 // Base class for SymbolTable implementations supporting Add/Remove.
 class MutableSymbolTableImpl : public SymbolTableImplBase {
  public:
diff --git a/src/include/fst/test/algo_test.h b/src/include/fst/test/algo_test.h
index 009e2bb..846ee3f 100644
--- a/src/include/fst/test/algo_test.h
+++ b/src/include/fst/test/algo_test.h
@@ -30,7 +30,7 @@
 #include <fst/weight.h>
 #include <fst/test/rand-fst.h>
 
-DECLARE_int32(repeat);  // defined in ./algo_test.cc
+DECLARE_EXE_int32(repeat);  // defined in ./algo_test.cc
 
 namespace fst {
 
diff --git a/src/lib/CMakeLists.txt b/src/lib/CMakeLists.txt
new file mode 100644
index 0000000..ef22ce8
--- /dev/null
+++ b/src/lib/CMakeLists.txt
@@ -0,0 +1,41 @@
+
+
+add_library(fst
+  SHARED
+  compat.cc
+  encode.cc
+  flags.cc
+  fst-types.cc
+  fst.cc
+  mapped-file.cc
+  properties.cc
+  symbol-table.cc
+  symbol-table-ops.cc
+  util.cc
+  weight.cc
+)
+GENERATE_EXPORT_HEADER( fst
+             BASE_NAME fst
+             EXPORT_MACRO_NAME fst_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/fst_Export.h
+             STATIC_DEFINE fst_BUILT_AS_STATIC
+)
+set_target_properties(fst PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+target_include_directories(fst PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+target_include_directories(fst PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+target_link_libraries(fst ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS fst
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+  )
+install(FILES
+${CMAKE_BINARY_DIR}/include/fst/fst_Export.h DESTINATION include/fst
+)
\ No newline at end of file
diff --git a/src/lib/mapped-file.cc b/src/lib/mapped-file.cc
index f855422..8186ae8 100644
--- a/src/lib/mapped-file.cc
+++ b/src/lib/mapped-file.cc
@@ -86,7 +86,12 @@ MappedFile *MappedFile::Map(std::istream &istrm, bool memorymap,
 #endif
     if (fd != -1) {
       std::unique_ptr<MappedFile> mmf(MapFromFileDescriptor(fd, pos, size));
+      
+#ifdef _WIN32
+      if (_close(fd) == 0 && mmf != nullptr) {
+#else
       if (close(fd) == 0 && mmf != nullptr) {
+#endif
         istrm.seekg(pos + size, std::ios::beg);
         if (istrm) {
           VLOG(2) << "mmap'ed region of " << size << " at offset " << pos
diff --git a/src/script/CMakeLists.txt b/src/script/CMakeLists.txt
new file mode 100644
index 0000000..e01fe6f
--- /dev/null
+++ b/src/script/CMakeLists.txt
@@ -0,0 +1,76 @@
+
+
+add_library(fstscriptutils
+  SHARED
+  arciterator-class.cc
+  stateiterator-class.cc
+  weight-class.cc
+  draw.cc
+  getters.cc
+  print.cc
+  text-io.cc
+  arcsort.cc
+  closure.cc
+  fst-class.cc
+  info.cc
+  info-impl.cc
+  verify.cc
+  map.cc
+  compile.cc
+  compose.cc
+  concat.cc
+  connect.cc
+  convert.cc
+  randequivalent.cc
+  randgen.cc
+  topsort.cc
+  union.cc
+  equal.cc
+  equivalent.cc
+  intersect.cc
+  invert.cc
+  encode.cc
+  decode.cc
+  encodemapper-class.cc
+)
+target_link_libraries(fstscriptutils PUBLIC fst)
+target_include_directories(fstscriptutils PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+set_target_properties(fstscriptutils PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+install(TARGETS fstscriptutils
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin)
+
+add_library(fstscript
+  determinize.cc
+  difference.cc
+  disambiguate.cc
+  epsnormalize.cc
+  isomorphic.cc
+  minimize.cc
+  project.cc
+  prune.cc
+  push.cc
+  relabel.cc
+  replace.cc
+  reverse.cc
+  reweight.cc
+  rmepsilon.cc
+  shortest-distance.cc
+  shortest-path.cc
+  synchronize.cc
+)
+target_link_libraries(fstscript PUBLIC fst fstscriptutils)
+target_include_directories(fstscriptutils PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+set_target_properties(fstscript PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+install(TARGETS fstscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin)
\ No newline at end of file
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
new file mode 100644
index 0000000..eaac896
--- /dev/null
+++ b/src/test/CMakeLists.txt
@@ -0,0 +1,54 @@
+add_executable(fst_test
+        fst_test.cc
+        ../include/fst/test/fst_test.h
+        )
+target_link_libraries(fst_test fst ${CMAKE_DL_LIBS})
+set_target_properties(fst_test PROPERTIES FOLDER test)
+add_test(NAME fst_test-test COMMAND fst_test)
+
+add_executable(weight_test
+        weight_test.cc
+        ../include/fst/test/weight-tester.h
+        )
+target_link_libraries(weight_test fst ${CMAKE_DL_LIBS})
+set_target_properties(weight_test PROPERTIES FOLDER test)
+add_test(NAME weight_test-test COMMAND weight_test)
+
+add_executable(algo_test_log algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_log fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_log
+        PRIVATE TEST_LOG=1)
+set_target_properties(algo_test_log PROPERTIES FOLDER test)
+add_test(NAME algo_test_log-test COMMAND algo_test_log)
+
+
+add_executable(algo_test_tropical algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_tropical fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_tropical
+        PRIVATE TEST_TROPICAL=1)
+set_target_properties(algo_test_tropical PROPERTIES FOLDER test)
+add_test(NAME algo_test_tropical-test COMMAND algo_test_tropical)
+
+
+add_executable(algo_test_minmax algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_minmax fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_minmax
+        PRIVATE TEST_MINMAX=1)
+set_target_properties(algo_test_minmax PROPERTIES FOLDER test)
+add_test(NAME algo_test_minmax-test COMMAND algo_test_minmax)
+
+
+add_executable(algo_test_lexicographic algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_lexicographic fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_lexicographic
+        PRIVATE TEST_LEXICOGRAPHIC=1)
+set_target_properties(algo_test_lexicographic PROPERTIES FOLDER test)
+add_test(NAME algo_test_lexicographic-test COMMAND algo_test_lexicographic)
+
+
+add_executable(algo_test_power algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_power fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_power
+        PRIVATE TEST_POWER=1)
+set_target_properties(algo_test_power PROPERTIES FOLDER test)
+add_test(NAME algo_test_power-test COMMAND algo_test_power)
\ No newline at end of file
-- 
2.35.3

